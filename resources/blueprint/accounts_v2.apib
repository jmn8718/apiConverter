FORMAT: 1A
HOST: https://sandbox-openplatform.bbvacompass.com

# Accounts (V2) - 3 Legged (Alpha Release)

## **Last update:** 11/30/2015 ([Change Log](http://docs.changelog.apiary.io/))

API to use BBVA Compass accounts.

## Basics

### Return Codes

The API will return always an HTTP STATUS

Code | Description
--- | ---
**2XX** | The API call was successful.
**4XX** | The API call had an error. The error will be encoded in the body of the response.
**5XX** | The API call was unsuccessful. You should retry later.

Specific error codes

Code | Description
--- | ---
`200 OK` | The request was successful.
`201 Created` | The request was successful and a resource is created.
`400 Bad Request` | The request could not be understood or required parameters were missing.
`401 Unauthorized` | Authentication failed or user doesn't have permissions for requested operation.
`403 Forbidden` | Access denied, the operation is not allowed.
`404 Not Found` | Resource was not found.
`405 Method Not Allowed` | Requested method is not supported for resource.
`409 Conflict` | Request could not be completed due to conflicting information.
`500 Internal server error` | Internal server error. Try again later.
`503 Service Unavailable` | Service is temporary unavailable. Try again later.

### Return Schema when errors

Error response schema :

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string"},
                    "errors": {
                      "type": ["array", "null"],
                      "uniqueItems": true,
                      "items": {
                        "type": ["object", "null"],
                        "properties": {
                          "errorCode":   { "type":"string", "required": true },
                          "customerDescription": { "type":"string", "required": true },
                          "shortDescription": { "type":"boolean", "required": false },
                          "system":  { "type":"string", "required": true },
                          "severity":  { "type":"string", "required": true },
                          "techCode":  { "type":"string", "required": true },
                          "language":  { "type":"string", "required": true },
                          "field":  { "type":"string", "required": true },
                          "serialversionuid":  { "type":"string", "required": true },
                          "source":  { "type":"string", "required": true }
                        }
                      }
                    }
                  }
                }
              }
            }

When there is a 4XX error, the errors array will be informed to help debug errors.

Example :

```
{
    "result": {
        "code": "400",
        "info": "Bad Request",
        "errors": [
            {
                "errorCode": "COPP-102",
                "customerDescription": "Customer Type value must be X or Y",
                "shortDescription": "Field not properly informed",
                "system": "COPP",
                "severity": "MAJOR",
                "system": null,
                "techCode": null,
                "language": "US",
                "field": null,
                "serialversionuid": 1,
                "source": null
            }
        ]
    }
}
```

### Allowed HTTPs methods:

Method | Description
--- | ---
`POST` | To create a new resource, or execute a operation that modifies data.
`PUT` | To update a resource
`GET` | Get a resource or list of resources
`DELETE` | To delete resource

## Idempotence in POST, PUT and DELETE Methods

This API provides a mechanism to ensure that operations are idempotent. Each call must have a header X-Unique-Transaction-ID
generated by the client that allows the server to identify each unique call. For methods that change data on the server (POST, PUT and DELETE) if
the server receives a call with a duplicated `X-Unique-Transaction-ID` in a week timeframe, the service won't be executed again but the response
will be the same as the first time it was executed.

This allows to avoid problems with network connectivity as a client can submit a POST, PUT or DELETE call again, knowing that it will be executed only once.
If the intent of the client is to execute the service again, then it must provide a different `X-Unique-Transaction-ID`.

**Requests/responses with a 500 response are no longer cached**

When calling with the same `X-Unique-Transaction-id`:

* If previous request was an error (http 4xx/5xx), new request should be executed. (No cache of error requests)
* If previous request was not an error, new request shouldn't be executed but return:

```
{
  "result": {
    "code": 409,
    "info": "Duplicated X-Unique-Transaction-ID",
    "internal_code": "duplicate_transaction_id"
  },
   "previous_response":{
      "result":{
         "code":200,
         "info":"User's reference information"
      },
      "data":{
         "user_reference_id":"1234-146a-1bsd-vbbd",
         "links":[
            {
               "rel":"self",
               "title":"Get user detail",
               "href":"/api/v2/me",
               "method":"GET"
            }
         ]
      }
   }
}
```

where key is the `X-Unique-Transaction-Id` on the request.

When calling service GET /api/v2/servicecalls/234234-324324-234234-222, will return the same information as returned on the first call.

* If service is not the same, service will return a 400 http response code with the following body:
```
{
  "result": {
    "code": 400,
    "info": "Bad Request",
    "internal_code": "duplicate_transaction_id_method"
  }
}
```
* If body is not the same, service will return a 400 http response code with the following body:
```
{
  "result": {
    "code": 400,
    "info": "Bad Request",
    "internal_code": "duplicate_transaction_id_body"
  }
}
```


This mechanism is only working 7 days after the first call is executed

## Security and authentication

All calls to the API must have an Authentication header, with a token that identifies the caller

```
Authorization: Tsec KVAd0QtqXrZKdqlpwLYdQuoI4cioUBJOTzpfu-zcN2sXhYZgG-SgtUh-Uua4ViGodLC0sITdp-zrQczvgAUwtp0RQtN3SB4DmYb0mQjvQrgnYV5j0b-oQqdeFsfqEqMZTBmtyB7zuT6--qiBbNdRk2I-q9Hza0N5KxHB4JidvvhuQggwOOxyB40mRIVc6KI2ekirKxAVrtjtVaUHJEvpDQ
```

There are two types of clients of the API :

* __Applications__
* __BBVA Compass Customers__

The login process is explained in the [Open Platform API Security Documentation](http://docs.openplatformsecurity.apiary.io/) section, but in summary :

* Applications logs using clientId and clientSecret.
* BBVA Compass Customers logs via BBVA Connect screens, using username and password, and a client_id to specify via which app the user is login in.


## Headers

All headers in the Open Platform follows [Hypertext Transfer Protocol RFC] (http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html)

Name                           | Type   | Required | Description
------------------------------ | ------ | -------- | ---
`Accept`                       | String | required | Header with the format expected in the response. If not specified it will be __application/json__
`X-Unique-Transaction-ID`      | String | required | Consumer-generated Global identifier for traceability and idempotence purposes. The format is left open to the client always that it avoids duplicates. Every single request must contain a new X-Unique-Transaction-Id. If a request with the same X-Unique-Transaction-Id has been requested in the last 7 days, the same response will be returned but no action will be performed. Example in UUID format : de305d54-75b4-431b-adb2-eb6b9e546014
`Authorization`                | String | required | Header with the access token necessary to consume each service, the format is **Authorization: Tsec <token>**. Please, refer to [Open Platform API Security Documentation](http://docs.openplatformsecurity.apiary.io/) for details.
`Accept-Language`                     | String | optional | Preferred language of the client, responses will be localized to this language if available. The name space of language tags is administered by the [IANA] (http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).
`Content-Type`                 | String | required | Header to specify request content format. Typically __application/json__

### X-Unique-Transaction-ID

A header containing a consumer-generated UUID is used for transactional tracing throughout the architecture, and to allow idempotence for POST, PUT and DELETE methods.

If the `X-Unique-Transaction-ID` header is missing the server will respond with (`400 Bad Request`) and the errorCode **transaction_id_missing**:

```json
{
    "result": {
        "code": 400,
        "message": "Missing X-Unique-Transaction-ID header",
        "internal_code": "transaction_id_missing"
    }
}
```

### Language


Service consumers can select a language of a service, by using standard HTTP headers.

    Accept-Language: en-US, es

If headers are not specified, the service will return **English by default**

## Versioning

As part of the URL, the version of the API must be specified as follows:

```
/v{version_number}/service_name
```

{version_number} is mandatory.


## Browsing the API

This API implements HATEOAS : Hypermedia as the Engine of Application State

### HATEOAS

Each resource will include an attribute **links** that will contain a list of related resources and available actions

```
    "links":    [
      { "rel": "self", "title": "Get account detail", "href": "/v1/api/accounts/01-1234" },
      { "rel": "unlink", "title": "Delete Link from account to application", "href": "/v1/api/accounts/unlink", "method": "POST"},
      { "rel": "cashin", "title": "Transfer money to this bbva account", "href": "/v1/api/accounts/01-1234/cashin", "method": "POST"},
      { "rel": "cashout",  "title": "Transfer money from this bbva account", "href": "/v1/api/accounts/01-1234/cashout", "method": "POST"}
    ]
```

Each link will have :

| Field   | Description                                                |
|---------|------------------------------------------------------------|
| name    | An identifier of the relation                              |
| title   | A description of the related resource action               |
| href    | Relative URI of the resource                               |
| method  | HTTP method to navigate to the relation *if ommited, GET*  |

## Formats

| format name   | description |
| ------------- | ----------- |
| string (99)   | string format, if followed by a number between (9), that's the max length for the string
| number (99,9) | numeric format, if followed by a number between (9) it defines the max length of the number, if followed by a comma (99,9) it defines the maximum number of decimals
| date          | string with format iso-8601 for dates : **yyyy-MM-dd**
| timestamp     | string with format iso-8601 for combined date and time : **yyyy-MM-ddTHH:mm:ssZ** if date in UTC or **yyyy-MM-ddTHH:mm:ss�hh:mm** if date includes time offset from UTC. To avoid problems, dates without time offset or UTC flag will be rejected.

# Group Authentication

Please refer to [Open Platform API Security Documentation](http://docs.openplatformsecurity.apiary.io/)

# Group Health Status

## API health [/api/v2/health]

Service to inquire the global API status.

### Get API Health Status [GET]


+ Request

    + Headers

            Accept : application/json
            Accept-Language: en, en-US
            Content-Type: application/json
            Authorization: Tsec 2VAd0QtqXrZKdqlpwLYdQuoI4cioUBJOTzpfu-zcN2sXhYZgG-SgtUh-Uua4ViGodLC0sITdp-zrQczvgAUwtp0RQtN3SB4DmYb0mQjvQrgnYV5j0b-oQqdeFsfqEqMZTBmtyB7zuT6--qiBbNdRk2I-q9Hza0N5KxHB4JidvvhuQggwOOxyB40mRIVc6KI2ekirKxAVrtjtVaUHJEvpD2
            X-Unique-Transaction-ID: f99e5ae0-2e9f-11e4-8c21-0800200c9a66

+ Response 200 (application/json; charset=utf-8)
    + Body

            {
                "result": {
                    "code": 200,
                    "info": "Health status"
                }
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "result":    {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string" }
                  }
                }
              }
            }

+ Response 403 (application/json; charset=utf-8)

    + Body

            {
                "result": {
                    "code": 403,
                    "info": "Invalid access token",
                    "internal_code": "access_token_invalid"
                }
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string"},
                    "errors": {
                      "type": ["array", "null"],
                      "uniqueItems": true,
                      "items": {
                        "type": ["object", "null"],
                        "properties": {
                          "errorCode":   { "type":"string", "required": true },
                          "customerDescription": { "type":"string", "required": true },
                          "shortDescription": { "type":"boolean", "required": false },
                          "system":  { "type":"string", "required": true },
                          "severity":  { "type":"string", "required": true },
                          "techCode":  { "type":"string", "required": true },
                          "language":  { "type":"string", "required": true },
                          "field":  { "type":"string", "required": true },
                          "serialversionuid":  { "type":"string", "required": true },
                          "source":  { "type":"string", "required": true }
                        }
                      }
                    }
                  }
                }
              }
            }

# Group User

## User [/api/v2/me]

Calls to this services must include an USER-TSEC, so when you're getting the user information, you're getting the logged
user information.

### Get user [GET]

Returns authenticated user account basic information.

For the moment this service returns an unique generated internal user identifier (user_reference_id).
This is not the real BBVA internal user id, as it will be a unique value, but each user will have a different
user_reference_id, for identification purposes.



+ Request
    + Headers

            Accept : application/json
            Accept-Language: en, en-US
            Content-Type: application/json
            Authorization: Tsec <token>
            X-Unique-Transaction-ID: f99e5ae0-2e9f-11e4-8c21-0800200c9a66

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "result": {
                "code": 200,
                "info": "User's reference information"
              },
              "data": {
                 "user_reference_id": "1234-146a-1bsd-vbbd",
                 "links": [
                   { "rel": "self", "title": "Get user detail", "href": "/api/v2/me", "method": "GET" }
                 ]
              }
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "result":            {
              "type": "object",
              "required": true,
              "properties": {
                "code": { "type": "number", "required": true },
                "info": { "type": "string", "required": true },
                "internal_code": { "type": "string" }
              }
            },
                "data": {
                  "type": ["object", "null"],
                  "properties": {
                    "user_reference_id": { "type": "string", "required": true },
                    "links":            {
              "type": "array",
              "required": true,
              "uniqueItems": true,
              "items": {
                "type":"object",
                "properties":{
                  "rel":    { "type":"string", "required": true},
                  "href":   { "type":"string", "required": true },
                  "title":  { "type":"string", "required": true },
                  "method": { "type":"string" }
                }
              }
            }
                  }
                }
              }
            }

## Notify [/api/v2/me/notify]

### Notify [POST]

Method will send a SMS text message or an email message to a user based on the preferred method set on that user's profile.

#### Attributes for the json body parameter

| name            | type         | required | description       |
|-----------------|--------------|----------|-------------------|
| otp             | number       | required | 6 digit one-time-pin generated to authenticate a specific user  |

+ Request

    + Header

            Accept : application/json
            Accept-Language: en, en-US
            Content-Type: application/json
            Authorization: Tsec <token>
            X-Unique-Transaction-ID: f99e5ae0-2e9f-11e4-8c21-0800200c9a66
            vnd.bbva.third-party-user-id: 123-123-123-123

    + Body

            {
                "otp": "000000"
            }

    + Schema

            {
                "type": "object",
                "required": true,
                "properties": {
                    "otp": { "type": "number", "required": true }
                }
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "result": {
                "code": 200,
                "info": "Communication Successful"
              }
            }

    + Schema

            {
              "type": "object",
              "properties": {
              "result": {
              "type": "object",
              "required": true,
              "properties": {
              "code": {
                 "type": "number",
                 "required": true
              },
              "info": {
                  "type": "string",
                  "required": true
                   }
                 }
                }
                }
              }

+ Response 400 (application/json; charset=utf-8)

    + Body

            {
              "result": {
                "code": 400,
                "info": "Invalid pin"
              }
            }

+ Response 403 (application/json; charset=utf-8)

    + Body

            {
              "result": {
                "code": 403,
                "info": "User preferences undefined"
              }
            }



# Group Accounts

Provides third parties the ability to book a new deposit account (e.g. DDA account), inquire specific account details or transaction history.

## Accounts [/api/v2/users/accounts]

+ Parameters

    + user_id ( required, string, `a3682d40-fa87-11e4-97a7-0002a5d5c51b` )
        User identifier.

    + status (optional, string, `all`)


## Accounts List [/api/v2/accounts{?type,linked}]

+ Parameters

    + type (optional, string, `01` ) ... Return only accounts of the specified type.

        Account type

        + Values
            + `01` (checkings)
            + `02` (savings)

    + linked (optional, string, `no` ) ... Return only linked or unlinked accounts to the caller app

        + Values
            + `yes`
            + `no`

### Get accounts [GET]

Method to return accounts basic information for the authenticated user

* Account types

code | description |
--- | ---
01 | checkings |
02 | savings | 

+ Request
    + Headers

            Accept : application/json
            Accept-Language: en, en-US
            Content-Type: application/json
            Authorization: Tsec <token>
            X-Unique-Transaction-ID: f99e5ae0-2e9f-11e4-8c21-0800200c9a66

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "result": {
                "code": 200,
                "info": "Accounts list"
              },
              "data": [
                {
                  "account_id": "01-1234",
                  "type": "01",
                  "number": "1234",
                  "linked": false,
                  "alias": "Work account",
                  "balance": 13041.20,
                  "currency": "USD",
                  "links":      [
                    { "rel": "self", "title": "Get account detail", "href": "/v1/api/accounts/01-1234" },
                    { "rel": "link", "title": "Link account to application", "href": "/v1/api/accounts/01-1234/link", "method": "POST"}
                  ]

                },
                {
                  "account_id": "02-1235",
                  "type": "02",
                  "number": "1235",
                  "linked": true,
                  "alias": "Work account",
                  "balance": 130.25,
                  "currency": "USD",
                  "links":      [
                    { "rel": "self", "title": "Get account detail", "href": "/v1/api/accounts/01-1234" },
                    { "rel": "unlink", "title": "Delete Link from account to application", "href": "/v1/api/accounts/unlink", "method": "POST"},
                    { "rel": "cashin", "title": "Transfer money to this bbva account", "href": "/v1/api/accounts/01-1234/cashin", "method": "POST"},
                    { "rel": "cashout",  "title": "Transfer money from this bbva account", "href": "/v1/api/accounts/01-1234/cashout", "method": "POST"}
                  ]
                }
              ]
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "result":    {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string" }
                  }
                },
                "data": {
                  "type": ["array", "null"],
                  "uniqueItems": true,
                  "items": {
                    "type": ["object", "null"],
                    "properties": {
                      "account_id": { "type":"string", "required": true },
                      "type":   { "type":"string", "required": true },
                      "number": { "type":"string", "required": true },
                      "linked": { "type":"boolean", "required": true },
                      "alias":  { "type":"string", "required": true },
                      "balance":{ "type":"number", "required": true },
                      "currency": { "type": "string", "required": true },
                      "links":        {
                      "type": "array",
                      "required": true,
                      "uniqueItems": true,
                      "items": {
                        "type":"object",
                        "properties":{
                          "rel":    { "type":"string", "required": true},
                          "href":   { "type":"string", "required": true },
                          "title":  { "type":"string", "required": true },
                          "method": { "type":"string" }
                        }
                      }
                    }
                    }
                  }
                }
              }
            }


## Detail [/api/v2/accounts/{account_id}]

+ Parameters

    + account_id ( required, string, `01-0000` )
        User's account identifier.

### Get account detail [GET]

Returns detailed data on an account.

+ Request - Example with participants

    + Headers

            Accept : application/json
            Accept-Language: en, en-US
            Content-Type: application/json
            Authorization: Tsec <token>
            X-Unique-Transaction-ID: f99e5ae0-2e9f-11e4-8c21-0800200c9a66
            vnd.bbva.third-party-user-id: 123-123-123-123

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "result": {
                "code": 200,
                "info": "Account information"
              },
              "data": {
                "account_id": "01-1234",
                "type": "01",
                "number": "1234",
                "account_number": "1244541234",
                "linked": true,
                "alias": "Work account",
                "balance": 13041.20,
                "posted_balance" : 13041.20,
                "currency": "USD",
                "status" : "active",
                "extended_status": "active",
                "participants":[
                {
                  "user_reference_id": "1234-146a-1bsd-vbbd",
                  "customer_name": "John Smith",
                  "relationship": "Holder"
                 }
                ],
                "links":[
                  { "rel": "self", "title": "Get account detail", "href": "/api/v2/accounts/01-1234" }
                ]
              }
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "result":                {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string" }
                  }
                },
                "data": {
                  "type": ["object", "null"],
                  "properties": {
                    "account_id": { "type":"string", "required": true },
                    "type":   { "type":"string", "required": true },
                    "number": { "type":"string", "required": true },
                    "account_number": { "type":"string", "required": true },
                    "linked": { "type":"boolean", "required": true },
                    "alias":  { "type":"string", "required": true },
                    "balance":{ "type":"number" },
                    "posted_balance":{ "type":"number" },
                    "currency": { "type": "string" },
                    "status": { "type": "string", "required": true, "enum" : ["ACTIVE", "BLOCKED", "ONLY_CREDIT", "ONLY_DEBIT", "CLOSED"] },
                    "extended_status": { "type": "string", "required": true, "enum" : ["ACTIVE", "BLOCKED", "ONLY_CREDIT", "ONLY_DEBIT", "CLOSED", "NO_CHECK_DEBITS", "INACTIVE", "DORMANT", "ABANDONED", "ESCHEATED"] },
                    "participants":{
                       "type":"array",
                       "required":true,
                       "uniqueItems":true,
                       "items":{
                       "type":"object",
                       "properties":{
                       "user_reference_id":{
                       "type":"string",
                       "required":true
                       },
                       "firstName":{
                       "type":"string",
                       "required":true
                       },
                       "middleName":{
                       "type":"string",
                       "required":true
                       },
                       "lastName":{
                       "type":"string",
                       "required":true
                       },
                       "relationship":{
                       "type":"string",
                       "required":true,
                       "enum" : ["ESCROW AGENT","CARD SIGNER","CO-SIGNER","GUARANTOR","AGENT","CUSTODIAN","CONSERVATOR/GUARDIAN","ATTORNEY IN FACT","MINOR/WARD","ENDORSER","OBLIGOR","BENEFICIARY","REPRESENTATIVE PAYEE","SIGNER","HOLDER","TRUSTEE","EXECUTOR","DBA","IRA BENE PRIMARY SPOUSE","IRA BENE PRIMARY NON-SPOUSE","IRA BENE CONTINGENT SPOUSE","IRA BENE CONTINGENT NON-SPOUSE","IRA CESA-RESPONSIBLE","IRA CESA-GRANTOR","IRA CESA-RESPONSIBLE/GRANTOR"]
                      }
                    }
                   }
                  },
                    "links":                    {
                      "type": "array",
                      "required": true,
                      "uniqueItems": true,
                      "items": {
                        "type":"object",
                        "properties":{
                          "rel":    { "type":"string", "required": true},
                          "href":   { "type":"string", "required": true },
                          "title":  { "type":"string", "required": true },
                          "method": { "type":"string" }
                        }
                      }
                    }
                  }
                }
              }
            }

+ Response 400 (application/json; charset=utf-8)

    + Body

            {
              "result": {
                "code": 400,
                "info": "Errors were found when validating the data of the request from the client",
                "internal_code": "bad_request",
                "errors": [
                  {
                    "participantDescription": "participantDescription: <Missing> Customer Name",
                    "shortDescription": "Participant",
                    "severity": "MAJOR",
                    "language": "EN",
                    "field": "participantDataRequest"
                  }
                ]
              }
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string"},
                    "errors": {
                      "type": ["array", "null"],
                      "uniqueItems": true,
                      "items": {
                        "type": ["object", "null"],
                        "properties": {
                          "errorCode":   { "type":"string", "required": true },
                          "customerDescription": { "type":"string", "required": true },
                          "shortDescription": { "type":"boolean", "required": false },
                          "system":  { "type":"string", "required": true },
                          "severity":  { "type":"string", "required": true },
                          "techCode":  { "type":"string", "required": true },
                          "language":  { "type":"string", "required": true },
                          "field":  { "type":"string", "required": true },
                          "serialversionuid":  { "type":"string", "required": true },
                          "source":  { "type":"string", "required": true }
                        }
                      }
                    }
                  }
                }
              }
            }


## Cashin [/api/v2/accounts/{account_id}/cashin]

+ Parameters

    + account_id ( required, string, `01-0000` )
        User's account identifier.

### Cashin : Retrieve money from settlement account to this user account [POST]

Method to transfer from `BBVA Settlement Account` to `BBVA User Account`.  Money is withdrawn from user's own `APP User Account` and deposited in user's own `BBVA User Account` with id={account_id}.

#### Attributes for the json body parameter

Name | Type | Required | Description
--- | --- | --- | ---
__amount__                   | Number | Required | Amount of money to transfer.
__currency__                  | String | Required | Currency of the indicated amount. ISO-4217 format: USD, EUR ...
__third_party_reference_id__    | String | Required | Number of up to 17 digits used for matching and reconciliation in settlement accounts.
__description__              | String (60) | Optional | Associated text describing the transfer's reason. Max Length 60
__type__                     | String | Optional | Parameter to identify special cashin operations (refunds when identity thefts, network problems, etc). **TBD** type values.


#### Response Codes

Status | Code | Description
--- | --- | ---
__201__              | OK | The operation completed successfully
__400__              | invalid_currency | The currency provided is not valid
__400__              | invalid_amount | The amount format is not valid
__400__              | third_party_reference_id_duplicated | This third_party_reference_id already exists
__400__              | invalid_third_party_reference_id | The third party reference id is not valid
__400__              | description_invalid | Limit Reached On Description Field, Max 60 Characters
__403__              | account_not_linked | The account was not linked previously
__404__              | account_not_found | The account was not found

+ Request A transfer to a normal account

    + Headers

            Accept : application/json
            Accept-Language: en, en-US
            Content-Type: application/json
            Authorization: Tsec <token>
            X-Unique-Transaction-ID: f99e5ae0-2e9f-11e4-8c21-0800200c9a66

    + Body

            {
              "amount" : 140.00,
              "currency": "USD",
              "third_party_reference_id": "23456789020141230",
              "description": "Debts from last week's party"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "number",
                  "description": "Currency of the indicated amount",
                  "required": true
                },
                "currency": {
                  "type": "string",
                  "description": "Currency of the indicated amount",
                  "required": true
                },
                "third_party_reference_id": {
                  "type": "number",
                  "description": "Unique operation Id, used for matching and reconciliation in settlement accounts",
                  "required": true
                },
                "description": {
                  "type": "string",
                  "description": "Associated text describing the transfer's reason",
                  "maxLength": 60
                },
                "type": {
                  "type": "***TBD***",
                  "description": "Parameter to identify special cashout operations (refunds when identity thefts, network problems, etc). **TBD** type values"
                }
              }
            }



+ Response 201 (application/json; charset=utf-8)

    + Body

            {
              "result": {
                "code": 201,
                "info": "Operation created"
              },
              "data": {
                "amount" : 140.00,
                "currency": "USD",
                "confirmation_id": "123",
                "third_party_reference_id": "23456789020141230",
                "description": "Debts from last week's party",
                "links": [
                  { "rel": "self", "title": "Get transfer detail", "href": "/api/v2/accounts/{id}/transfers/{id}" }
                ]
              }
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "result":    {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string" }
                  }
                },
                "data": {
                  "type": ["object", "null"],
                  "properties": {
                    "amount": { "type": "number", "required": true },
                    "currency": { "type": "string", "required": true },
                    "confirmation_id": { "type": "string", "required": true },
                    "third_party_reference_id": { "type": "number", "required": true },
                    "description": { "type": "string", "required": true },
                    "links":        {
                      "type": "array",
                      "required": true,
                      "uniqueItems": true,
                      "items": {
                        "type":"object",
                        "properties":{
                          "rel":    { "type":"string", "required": true},
                          "href":   { "type":"string", "required": true },
                          "title":  { "type":"string", "required": true },
                          "method": { "type":"string" }
                        }
                      }
                    }
                  }
                }
              }
            }


+ Response 400 (application/json; charset=utf-8)

    + Body

            {
                "result": {
                    "code": 400,
                    "info": "The amount format is not valid",
                    "internal_code": "invalid_amount"
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string"},
                    "errors": {
                      "type": ["array", "null"],
                      "uniqueItems": true,
                      "items": {
                        "type": ["object", "null"],
                        "properties": {
                          "errorCode":   { "type":"string", "required": true },
                          "customerDescription": { "type":"string", "required": true },
                          "shortDescription": { "type":"boolean", "required": false },
                          "system":  { "type":"string", "required": true },
                          "severity":  { "type":"string", "required": true },
                          "techCode":  { "type":"string", "required": true },
                          "language":  { "type":"string", "required": true },
                          "field":  { "type":"string", "required": true },
                          "serialversionuid":  { "type":"string", "required": true },
                          "source":  { "type":"string", "required": true }
                        }
                      }
                    }
                  }
                }
              }
            }

+ Response 403 (application/json; charset=utf-8)

    + Body

            {
                "result": {
                    "code": 403,
                    "info": "The account was not linked previously",
                    "internal_code": "account_not_linked"
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string"},
                    "errors": {
                      "type": ["array", "null"],
                      "uniqueItems": true,
                      "items": {
                        "type": ["object", "null"],
                        "properties": {
                          "errorCode":   { "type":"string", "required": true },
                          "customerDescription": { "type":"string", "required": true },
                          "shortDescription": { "type":"boolean", "required": false },
                          "system":  { "type":"string", "required": true },
                          "severity":  { "type":"string", "required": true },
                          "techCode":  { "type":"string", "required": true },
                          "language":  { "type":"string", "required": true },
                          "field":  { "type":"string", "required": true },
                          "serialversionuid":  { "type":"string", "required": true },
                          "source":  { "type":"string", "required": true }
                        }
                      }
                    }
                  }
                }
              }
            }

+ Response 404 (application/json; charset=utf-8)

    + Body

            {
                "result": {
                    "code": 404,
                    "info": "The account was not found",
                    "internal_code": "account_not_found"
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string"},
                    "errors": {
                      "type": ["array", "null"],
                      "uniqueItems": true,
                      "items": {
                        "type": ["object", "null"],
                        "properties": {
                          "errorCode":   { "type":"string", "required": true },
                          "customerDescription": { "type":"string", "required": true },
                          "shortDescription": { "type":"boolean", "required": false },
                          "system":  { "type":"string", "required": true },
                          "severity":  { "type":"string", "required": true },
                          "techCode":  { "type":"string", "required": true },
                          "language":  { "type":"string", "required": true },
                          "field":  { "type":"string", "required": true },
                          "serialversionuid":  { "type":"string", "required": true },
                          "source":  { "type":"string", "required": true }
                        }
                      }
                    }
                  }
                }
              }
            }


## Cashin Reverse [/v2/api/accounts/{account_id}/cashin/{third_party_reference_id}]

+ Parameters

    + account_id ( required, string, `01-0000` )
        User's account identifier.
    + third_party_reference_id ( required, string, `23456789020141230` )
        Unique ID that identifies the operation to be removed, format is a number of up to 17 digits.


### Cashin Reverse [DELETE]

Method to remove a cashin operation. The operation will be removed from the transaction logs.
A cashin operation can only be reversed in the same day it was created.

#### Attributes for the json body parameter

Name | Type | Required | Description
--- | --- | --- | ---
__amount__                 | Number | Required | Amount of money to transfer.
__currency__               | String | Required | Currency of the indicated amount. ISO-4217 format: USD, EUR ...
__description__            | String (60) | Optional | Associated text describing the reverse's reason. Max Length 60


+ Request

    + Headers

            Accept : application/json
            Accept-Language: en, en-US
            Content-Type: application/json
            Authorization: Tsec <token>
            X-Unique-Transaction-ID: f99e5ae0-2e9f-11e4-8c21-0800200c9a66

    + Body

            {
              "amount" : 140.00,
              "currency": "USD",
              "description": "Debts from last week's party"
            }

    + Schema

            {
              "type": "object",
              "required": true,
              "properties": {
                "amount": {
                  "type": "number",
                  "description": "Amount of money to transfer",
                  "required": true
                },
                "currency": {
                  "type": "string",
                  "description": "Currency of the indicated amount",
                  "required": true
                },
                "description": {
                  "type": "string",
                  "description": "Associated text describing the transfer's reason",
                  "maxLength": 60
                }
              }
            }


+ Response 200 (application/json; charset=utf-8)

            {
                "result": {
                    "code": 200,
                    "info": "Cashin reverse executed successfully"
                }
            }

## Cashout [/api/v2/accounts/{account_id}/cashout]

+ Parameters

    + account_id ( required, string, `01-0000` )
        User's account identifier.

### Cashout : Transfer money from this account to the settlement account [POST]

Method to create a transfer from `BBVA User Account` to the `BBVA Settlement Account`. Money is withdrawn from user's own `BBVA User Account` and deposited in user's own `APP User Account`

#### Attributes for the json body parameter

Name | Type | Required | Description
--- | --- | --- | ---
__amount__                 | Number | Required | Amount of money to transfer.
__currency__                 | String | Required | Currency of the indicated amount. ISO-4217 format: USD, EUR ...
__third_party_reference_id__  | String | Required | Number of up to 17 digits used for matching and reconciliation in settlement accounts.
__description__            | String | Optional | Associated text describing the transfer's reason.
__type__                   | String | Optional | Parameter to identify special cashout operations (refunds when identity thefts, network problems, etc). **TBD** type values.

#### Response Codes

Status | Code | Description
--- | --- | ---
__201__              | OK | The operation completed successfully
__400__              | invalid_currency | The currency provided is not valid
__400__              | invalid_amount | The amount format is not valid
__400__              | third_party_reference_id_duplicated | This third_party_reference_id already exists
__400__              | invalid_third_party_reference_id | The third party reference id is not valid
__400__              | description_invalid | Limit Reached On Description Field, Max 60 Characters
__403__              | account_not_linked | The account was not linked previously
__403__              | insufficient_fund | The account does not have enough fund
__404__              | account_not_found | The account was not found


+ Request transfer to an settlement account
    + Headers

            Accept : application/json
            Accept-Language: en, en-US
            Content-Type: application/json
            Authorization: Tsec <token>
            X-Unique-Transaction-ID: f99e5ae0-2e9f-11e4-8c21-0800200c9a66

    + Body

            {
              "amount" : 140.00,
              "currency": "USD",
              "third_party_reference_id": "23456789020141231",
              "description": "Debts from last week's party"
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "amount": {
                  "type": "number",
                  "description": "Amount of money to transfer",
                  "required": true
                },
                "currency": {
                  "type": "string",
                  "description": "Currency of the indicated amount",
                  "required": true
                },
                "third_party_reference_id": {
                  "type": "number",
                  "description": "Unique operation Id, used for matching and reconciliation in settlement accounts",
                  "required": true
                },
                "description": {
                  "type": "string",
                  "description": "Associated text describing the transfer's reason",
                  "maxLength": 60
                },
                "type": {
                  "type": "***TBD***",
                  "description": "Parameter to identify special cashout operations (refunds when identity thefts, network problems, etc). **TBD** type values"
                }
              }
            }


+ Response 201 (application/json; charset=utf-8)

    + Body

            {
              "result": {
                "code": 201,
                "info": "Operation created"
              },
              "data": {
                "amount" : 140.00,
                "currency": "USD",
                "confirmation_id": "123",
                "third_party_reference_id": "23456789020141231",
                "description": "Debts from last week's party",
                "links": [
                  { "rel": "self", "title": "Get transfer detail", "href": "/api/v2/accounts/{id}/transfers/{id}" }
                ]
              }
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "result":    {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string" }
                  }
                },
                "data": {
                  "type": ["object", "null"],
                  "properties": {
                    "amount": { "type": "number", "required": true },
                    "currency": { "type": "string", "required": true },
                    "confirmation_id": { "type": "string", "required": true },
                    "third_party_reference_id": { "type": "number", "required": true },
                    "description": { "type": "string", "required": true },
                    "links":        {
                      "type": "array",
                      "required": true,
                      "uniqueItems": true,
                      "items": {
                        "type":"object",
                        "properties":{
                          "rel":    { "type":"string", "required": true},
                          "href":   { "type":"string", "required": true },
                          "title":  { "type":"string", "required": true },
                          "method": { "type":"string" }
                        }
                      }
                    }
                  }
                }
              }
            }


+ Response 400 (application/json; charset=utf-8)

    + Body

            {
                "result": {
                    "code": 400,
                    "info": "The amount format is not valid",
                    "internal_code": "invalid_amount"
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string"},
                    "errors": {
                      "type": ["array", "null"],
                      "uniqueItems": true,
                      "items": {
                        "type": ["object", "null"],
                        "properties": {
                          "errorCode":   { "type":"string", "required": true },
                          "customerDescription": { "type":"string", "required": true },
                          "shortDescription": { "type":"boolean", "required": false },
                          "system":  { "type":"string", "required": true },
                          "severity":  { "type":"string", "required": true },
                          "techCode":  { "type":"string", "required": true },
                          "language":  { "type":"string", "required": true },
                          "field":  { "type":"string", "required": true },
                          "serialversionuid":  { "type":"string", "required": true },
                          "source":  { "type":"string", "required": true }
                        }
                      }
                    }
                  }
                }
              }
            }

+ Response 403 (application/json; charset=utf-8)

    + Body

            {
                "result": {
                    "code": 403,
                    "info": "The account does not have enough fund",
                    "internal_code": "insufficient_fund"
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string"},
                    "errors": {
                      "type": ["array", "null"],
                      "uniqueItems": true,
                      "items": {
                        "type": ["object", "null"],
                        "properties": {
                          "errorCode":   { "type":"string", "required": true },
                          "customerDescription": { "type":"string", "required": true },
                          "shortDescription": { "type":"boolean", "required": false },
                          "system":  { "type":"string", "required": true },
                          "severity":  { "type":"string", "required": true },
                          "techCode":  { "type":"string", "required": true },
                          "language":  { "type":"string", "required": true },
                          "field":  { "type":"string", "required": true },
                          "serialversionuid":  { "type":"string", "required": true },
                          "source":  { "type":"string", "required": true }
                        }
                      }
                    }
                  }
                }
              }
            }

+ Response 404 (application/json; charset=utf-8)

    + Body

            {
                "result": {
                    "code": 404,
                    "info": "The account was not found",
                    "internal_code": "account_not_found"
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string"},
                    "errors": {
                      "type": ["array", "null"],
                      "uniqueItems": true,
                      "items": {
                        "type": ["object", "null"],
                        "properties": {
                          "errorCode":   { "type":"string", "required": true },
                          "customerDescription": { "type":"string", "required": true },
                          "shortDescription": { "type":"boolean", "required": false },
                          "system":  { "type":"string", "required": true },
                          "severity":  { "type":"string", "required": true },
                          "techCode":  { "type":"string", "required": true },
                          "language":  { "type":"string", "required": true },
                          "field":  { "type":"string", "required": true },
                          "serialversionuid":  { "type":"string", "required": true },
                          "source":  { "type":"string", "required": true }
                        }
                      }
                    }
                  }
                }
              }
            }

## Cashout Reverse [/api/v2/accounts/{account_id}/cashout/{third_party_reference_id}]


+ Parameters

    + account_id ( required, string, `01-0000` )
        User's account identifier.
    + third_party_reference_id ( required, number, `23456789020141231` )
        Unique ID that identifies the operation to be removed, format is a number of up to 17 digits.

### Cashout Reverse [DELETE]

Method to remove a cashin operation. The operation will be removed from the transaction logs.
A cashin operation can only be reversed in the same day it was created.

#### Attributes for the json body parameter

Name | Type | Required | Description
--- | --- | --- | ---
__amount__                 | Number | Required | Amount of money to transfer.
__currency__               | String | Required | Currency of the indicated amount. ISO-4217 format: USD, EUR ...
__description__            | String (60) | Optional | Associated text describing the reverse's reason. Max Length 60

+ Request
    + Headers

            Accept : application/json
            Accept-Language: en, en-US
            Content-Type: application/json
            Authorization: Tsec <token>
            X-Unique-Transaction-ID: f99e5ae0-2e9f-11e4-8c21-0800200c9a66

    + Body

            {
              "amount" : 140.00,
              "currency": "USD",
              "description": "Debts from last week's party"
            }

    + Schema

            {
              "type": "object",
              "required": true,
              "properties": {
                "amount": {
                  "type": "number",
                  "description": "Amount of money to transfer",
                  "required": true
                },
                "currency": {
                  "type": "string",
                  "description": "Currency of the indicated amount",
                  "required": true
                },
                "description": {
                  "type": "string",
                  "description": "Associated text describing the transfer's reason",
                  "maxLength": 60
                }
              }
            }

+ Response 200 (application/json; charset=utf-8)

            {
                "result": {
                    "code": 200,
                    "info": "Cashout reverse executed successfully"
                }
            }

## Link [/api/v2/accounts/link]

### Creates a link from one or more accounts to an application [POST]

Method to link accounts to calling application. This will allow the application to execute operations with in the linked accounts
with a valid USER-TSEC token.

#### Response Codes

Status   | Code | Description
---      | --- | ---
__200__  | OK | Account linked successfully
__400__  | account_ids_missing| Missing account ids to link
__403__  | account_linked | Account was already linked
__404__  | account_not_found | The account was not found
__404__  | account_not_valid | Account ID Invalid (This case happens if a user tries to link an account that is not his.)


Each account will be treated separately and the response will include
 information about each linking process. The global response code will be 200 if the API could process the call
 even if each link process had actually a problem.

+ Request

    + Headers

            Accept : application/json
            Accept-Language: en, en-US
            Content-Type: application/json
            Authorization: Tsec <token>
            X-Unique-Transaction-ID: f99e5ae0-2e9f-11e4-8c21-0800200c9a66

    + Body

            {
              "ids": ["01-0000", "01-0099"]
            }

+ Response 200 (application/json; charset=utf-8)

            {
                "result": {
                    "code": 200,
                    "info": "Linking process executed, check data for each operation detail"
                },
                "data": {
                    "operations": [
                        {
                            "account_id": "01-0000",
                            "result": {
                                "code": 200,
                                "info": "Account linked successfully"
                            }
                        },
                        {
                            "account_id": "01-0099",
                            "result": {
                                 "code": 404,
                                 "info": "Unable to find the requested account",
                                 "internal_code": "user_account_not_found"
                            }
                        }
                    ]
                }
            }

+ Response 400 (application/json; charset=utf-8)

    + Body

            {
                "result": {
                    "code": 400,
                    "info": "Missing account ids to link",
                    "internal_code": "account_ids_missing"
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string"},
                    "errors": {
                      "type": ["array", "null"],
                      "uniqueItems": true,
                      "items": {
                        "type": ["object", "null"],
                        "properties": {
                          "errorCode":   { "type":"string", "required": true },
                          "customerDescription": { "type":"string", "required": true },
                          "shortDescription": { "type":"boolean", "required": false },
                          "system":  { "type":"string", "required": true },
                          "severity":  { "type":"string", "required": true },
                          "techCode":  { "type":"string", "required": true },
                          "language":  { "type":"string", "required": true },
                          "field":  { "type":"string", "required": true },
                          "serialversionuid":  { "type":"string", "required": true },
                          "source":  { "type":"string", "required": true }
                        }
                      }
                    }
                  }
                }
              }
            }

+ Response 403 (application/json; charset=utf-8)

    + Body

            {
                "result": {
                    "code": 403,
                    "info": "Account was already linked",
                    "internal_code": "account_linked"
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string"},
                    "errors": {
                      "type": ["array", "null"],
                      "uniqueItems": true,
                      "items": {
                        "type": ["object", "null"],
                        "properties": {
                          "errorCode":   { "type":"string", "required": true },
                          "customerDescription": { "type":"string", "required": true },
                          "shortDescription": { "type":"boolean", "required": false },
                          "system":  { "type":"string", "required": true },
                          "severity":  { "type":"string", "required": true },
                          "techCode":  { "type":"string", "required": true },
                          "language":  { "type":"string", "required": true },
                          "field":  { "type":"string", "required": true },
                          "serialversionuid":  { "type":"string", "required": true },
                          "source":  { "type":"string", "required": true }
                        }
                      }
                    }
                  }
                }
              }
            }

+ Response 404 (application/json; charset=utf-8)

    + Body

            {
                "result": {
                    "code": 404,
                    "info": "The account was not found",
                    "internal_code": "account_not_found"
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string"},
                    "errors": {
                      "type": ["array", "null"],
                      "uniqueItems": true,
                      "items": {
                        "type": ["object", "null"],
                        "properties": {
                          "errorCode":   { "type":"string", "required": true },
                          "customerDescription": { "type":"string", "required": true },
                          "shortDescription": { "type":"boolean", "required": false },
                          "system":  { "type":"string", "required": true },
                          "severity":  { "type":"string", "required": true },
                          "techCode":  { "type":"string", "required": true },
                          "language":  { "type":"string", "required": true },
                          "field":  { "type":"string", "required": true },
                          "serialversionuid":  { "type":"string", "required": true },
                          "source":  { "type":"string", "required": true }
                        }
                      }
                    }
                  }
                }
              }
            }

## Unlink [/api/v2/accounts/unlink]

Removes the linked accounts association to the calling application. This will revoke the application permission
to execute operations in these accounts with a valid USER-TSEC token.

### Removes a link from one or more accounts to an application [POST]

#### Response Codes

Status | Code | Description
--- | --- | ---
__200__ | OK | Account unlinked successfully
__400__ | account_ids_missing| Missing account ids to unlink
__403__ | account_not_linked | The account was not linked previously
__404__ | account_not_found | The account was not found
__404__ | account_not_valid | Account ID Invalid (This case happens if a user tries to unlink an account that is not his.)


Each account will be treated separately and the response will include
 information about each unlinking process. The global response code will be 200 if the API could process the call
 even if each link process had actually a problem.

+ Request

    + Headers

            Accept : application/json
            Accept-Language: en, en-US
            Content-Type: application/json
            Authorization: Tsec <token>
            X-Unique-Transaction-ID: f99e5ae0-2e9f-11e4-8c21-0800200c9a66

    + Body

            {
                "ids": ["01-0002", "01-0099"]
            }

+ Response 200 (application/json; charset=utf-8)

            {
                "result": {
                    "code": 200,
                    "info": "Unlinking process executed, check data for each operation detail"
                },
                "data": {
                    "operations": [
                          {
                              "account_id": "01-0000",
                              "result": {
                                  "code": 200,
                                  "info": "Account unlinked successfully"
                              }
                          },
                          {
                              "account_id": "01-0099",
                              "result": {
                                 "code": 404,
                                 "info": "Unable to find the requested account",
                                 "internal_code": "user_account_not_found"
                              }
                          }
                    ]
                }
            }

+ Response 400 (application/json; charset=utf-8)

    + Body

            {
                "result": {
                    "code": 400,
                    "info": "Missing account ids to unlink",
                    "internal_code": "account_ids_missing"
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string"},
                    "errors": {
                      "type": ["array", "null"],
                      "uniqueItems": true,
                      "items": {
                        "type": ["object", "null"],
                        "properties": {
                          "errorCode":   { "type":"string", "required": true },
                          "customerDescription": { "type":"string", "required": true },
                          "shortDescription": { "type":"boolean", "required": false },
                          "system":  { "type":"string", "required": true },
                          "severity":  { "type":"string", "required": true },
                          "techCode":  { "type":"string", "required": true },
                          "language":  { "type":"string", "required": true },
                          "field":  { "type":"string", "required": true },
                          "serialversionuid":  { "type":"string", "required": true },
                          "source":  { "type":"string", "required": true }
                        }
                      }
                    }
                  }
                }
              }
            }

+ Response 403 (application/json; charset=utf-8)

    + Body

            {
                "result": {
                    "code": 403,
                    "info": "The account was not linked previously",
                    "internal_code": "account_not_linked"
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string"},
                    "errors": {
                      "type": ["array", "null"],
                      "uniqueItems": true,
                      "items": {
                        "type": ["object", "null"],
                        "properties": {
                          "errorCode":   { "type":"string", "required": true },
                          "customerDescription": { "type":"string", "required": true },
                          "shortDescription": { "type":"boolean", "required": false },
                          "system":  { "type":"string", "required": true },
                          "severity":  { "type":"string", "required": true },
                          "techCode":  { "type":"string", "required": true },
                          "language":  { "type":"string", "required": true },
                          "field":  { "type":"string", "required": true },
                          "serialversionuid":  { "type":"string", "required": true },
                          "source":  { "type":"string", "required": true }
                        }
                      }
                    }
                  }
                }
              }
            }

+ Response 404 (application/json; charset=utf-8)

    + Body

            {
                "result": {
                    "code": 404,
                    "info": "The account was not found",
                    "internal_code": "account_not_found"
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string"},
                    "errors": {
                      "type": ["array", "null"],
                      "uniqueItems": true,
                      "items": {
                        "type": ["object", "null"],
                        "properties": {
                          "errorCode":   { "type":"string", "required": true },
                          "customerDescription": { "type":"string", "required": true },
                          "shortDescription": { "type":"boolean", "required": false },
                          "system":  { "type":"string", "required": true },
                          "severity":  { "type":"string", "required": true },
                          "techCode":  { "type":"string", "required": true },
                          "language":  { "type":"string", "required": true },
                          "field":  { "type":"string", "required": true },
                          "serialversionuid":  { "type":"string", "required": true },
                          "source":  { "type":"string", "required": true }
                        }
                      }
                    }
                  }
                }
              }
            }

## Transactions [/api/v2/accounts/{account_id}/transactions{?dateFrom,dateTo,amountFrom,amountTo,next}]

+ Parameters

    + user_id ( required, string, `a3682d40-fa87-11e4-97a7-0002a5d5c51b` )
        User identifier.
    + account_id ( required, string, `01-0000` )
        User's account identifier.
    + dateFrom (optional, string, `2015-02-01` )
        Date From to filter the result of the service. Format YYYY-MM-DD
    + dateTo (optional, string, `2015-02-16` )
        Date To to filter the result of the service. Format YYYY-MM-DD
    + amountFrom (optional, string, `200` )
        Amount From to filter the result of the service (cents).
    + amountTo (optional, string, `1000` )
        Amount To to filter the result of the service (cents).
    + next (optional, string, `265` )
        If we want paginate the results, pass this parameter with the value returned in the previous call.


### Get Transactions  [GET]

Method will return all transactions for a specific account


#### Response attributes
Name | Type | Description
--- | --- | ---
__operation_number__  | String | Transaction ID.
__posted_date__        | String | Date of the transaction was done
__description__     | String | Description of the type of transaction.
__reversal_id__  | String | Only appear if the transaction settlement is cashIn/cashOut
__amount__  | Number | amount of the transaction.
__posted_balance__       | Number | Posted balance of the account after the transaction.
__currency__       | String | Currency of the transaction
__check_number__   | String | Check number of the transaction.
__transaction_type__  | String | Type of transactions

+ Request
    + Headers

            Accept : application/json
            Accept-Language: en, en-US
            Content-Type: application/json
            X-Unique-Transaction-ID: f99e5ae0-2e9f-11e4-8c21-0800200c9a66


+ Response 200 (application/json; charset=utf-8; version=1)

    + Body

            {
                "result":
                {
                    "code": 200,
                    "info": "Operation Successful"
                },
                "data":[
                {
                    "operation_number": "751",
                    "posted_date": "2015-02-01",
                    "description": "TRANSFER FROM DWOLLA",
                    "reversal_id": "041151126",
                    "amount": 2,
                    "posted_balance": 2044.44,
                    "currency": "USD",
                    "check_number": "0",
                    "transaction_type": "CUST SERV DEBIT",
                    "links": [
                        {
                            "rel": "self",
                            "href": "/api/v2/users/a3682d40-fa87-11e4-97a7-0002a5d5c51b/accounts/01-5687/transactions",
                            "title": "Get Transactions",
                            "method": "GET"
                        },
                        {
                            "rel": "details",
                            "href": "/api/v2/users/a3682d40-fa87-11e4-97a7-0002a5d5c51b/accounts/01-5687",
                            "title": "Get Account Detail",
                            "method": "GET"
                        }
                    ]
                }
                ]
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": {
                      "type": "number",
                      "required": true
                    },
                    "info": {
                      "type": "string",
                      "required": true
                    },
                    "internal_code": {
                      "type": "string"
                    }
                  }
                },
                "data": {
                  "type": [
                    "array",
                    "null"
                  ],
                  "uniqueItems": true,
                  "items": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "operation_number": {
                        "type": "string",
                        "required": true
                      },
                      "posted_date": {
                        "type": "string",
                        "required": true,
                        "format": "YYYY-dd-MM"
                      },
                      "description": {
                        "type": "string",
                        "required": true
                      },
                      "reversal_id": {
                        "type": "string",
                        "required": false
                      },
                      "amount": {
                        "type": "number",
                        "required": true
                      },
                      "posted_balance": {
                        "type": "string",
                        "required": true
                      },
                      "currency": {
                        "type": "number",
                        "required": true
                      },
                      "check_number": {
                        "type": "string",
                        "required": false
                      },
                       "transaction_type": {
                        "type": "string",
                        "required": true
                      },
                      "links": {
                        "type": "array",
                        "required": true,
                        "uniqueItems": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "required": true
                            },
                            "href": {
                              "type": "string",
                              "required": true
                            },
                            "title": {
                              "type": "string",
                              "required": true
                            },
                            "method": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }


+ Response 206 (application/json; charset=utf-8; version=1)

    + Body

            {
                "result":
                {
                    "code": 206,
                    "info": "Partial Content"
                },
                "pagination": {
                    "next": "665"
                },
                "data":[
                {
                    "operation_number": "751",
                    "posted_date": "2015-02-01",
                    "description": "TRANSFER FROM DWOLLA",
                    "reversal_id": "041151126",
                    "amount": 2,
                    "posted_balance": 2044.44,
                    "currency": "USD",
                    "check_number": "0",
                    "transaction_type": "CUST SERV DEBIT",
                    "links": [
                        {
                            "rel": "self",
                            "href": "/api/v2/users/a3682d40-fa87-11e4-97a7-0002a5d5c51b/accounts/01-5687/transactions",
                            "title": "Get Transactions",
                            "method": "GET"
                        },
                        {
                            "rel": "details",
                            "href": "/api/v2/users/a3682d40-fa87-11e4-97a7-0002a5d5c51b/accounts/01-5687",
                            "title": "Get Account Detail",
                            "method": "GET"
                        }
                    ]
                  }
                ]
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": {
                      "type": "number",
                      "required": true
                    },
                    "info": {
                      "type": "string",
                      "required": true
                    },
                    "internal_code": {
                      "type": "string"
                    }
                  }
                },
                "data": {
                  "type": [
                    "array",
                    "null"
                  ],
                  "uniqueItems": true,
                  "items": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "operation_number": {
                        "type": "string",
                        "required": true
                      },
                      "posted_date": {
                        "type": "string",
                        "required": true,
                        "format": "YYYY-dd-MM"
                      },
                      "description": {
                        "type": "string",
                        "required": true
                      },
                      "reversal_id": {
                        "type": "string",
                        "required": false
                      },
                      "amount": {
                        "type": "number",
                        "required": true
                      },
                      "posted_balance": {
                        "type": "string",
                        "required": true
                      },
                      "currency": {
                        "type": "number",
                        "required": true
                      },
                      "check_number": {
                        "type": "string",
                        "required": false
                      },
                       "transaction_type": {
                        "type": "string",
                        "required": true
                      },
                      "links": {
                        "type": "array",
                        "required": true,
                        "uniqueItems": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "required": true
                            },
                            "href": {
                              "type": "string",
                              "required": true
                            },
                            "title": {
                              "type": "string",
                              "required": true
                            },
                            "method": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

+ Response 500 (application/json; charset=utf-8; version=1)

    + Body

            {
                "result": {
                   "code": 500,
                   "info": "Internal error"
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": {
                      "type": "number",
                      "required": true
                    },
                    "info": {
                      "type": "string",
                      "required": true
                    },
                    "internal_code": {
                      "type": "string"
                    }
                  }
                },
                "data": {
                  "type": [
                    "array",
                    "null"
                  ],
                  "uniqueItems": true,
                  "items": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "operation_number": {
                        "type": "string",
                        "required": true
                      },
                      "posted_date": {
                        "type": "string",
                        "required": true,
                        "format": "YYYY-dd-MM"
                      },
                      "description": {
                        "type": "string",
                        "required": true
                      },
                      "reversal_id": {
                        "type": "string",
                        "required": false
                      },
                      "amount": {
                        "type": "number",
                        "required": true
                      },
                      "posted_balance": {
                        "type": "string",
                        "required": true
                      },
                      "currency": {
                        "type": "number",
                        "required": true
                      },
                      "check_number": {
                        "type": "string",
                        "required": false
                      },
                       "transaction_type": {
                        "type": "string",
                        "required": true
                      },
                      "links": {
                        "type": "array",
                        "required": true,
                        "uniqueItems": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "required": true
                            },
                            "href": {
                              "type": "string",
                              "required": true
                            },
                            "title": {
                              "type": "string",
                              "required": true
                            },
                            "method": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }



# Group Reconciliation

Application services that require an `APP-TSEC` to authenticate.

***Open Platform - Reconciliation file process***

* BBVA Compass will receive a file from Third Party (on daily basis) including data for all posted transactions
* File will be received via Web Service call to `POST /api/v2/reconciliation`, identified by an `APP-TSEC` token
  * The third party will provide a CSV file and a hash defined by BBVA
* At 11pm the reconciliation process will begin, or it will begin after 11pm when the reconciliation file is loaded into the mainframe.
  * If there are rejects, the Reconciliation will produce a file with the same format(IFF)
  * When the reject file is produced there will also be an email sent to the third party
* The third party will call GET `/api/v2/files?type=recon_rejects` With an `APP-TSEC` token to get a list of their recent files and a reference ID for each file.
  * If there are no rejects, this service response will be empty
* With the reference ID, a second webservice call to GET `/api/v2/files/{file_reference_id}` can be made to download the file

**Reconciliation Input File Format**

The service expects a csv file. The first line of the file must include always the headers,
with the exact names described in this documentation. The order is not important.
Extra columns will be ignored.

When the file is uploaded, there will be a validation that all headers are present, and that the
types of each field are correct. If there is any format errors, the service will return an error 400,
and the file will be rejected and must be uploaded again once the format errors have been fixed.

Name | Type | Required | Description
--- | --- | --- | ---
__timestamp__ | Date | Required | The date and time the transaction was created by the Partner (in UTC)
__type__ | String | Required | Type of the transaction, limited to one of the following: _credit_ - funds moved out of the BBVA settlement account; _debit_ - funds moved into the BBVA settlement account
__amount__  | Number | Required | The amount of the transaction (always a positive value)
__user_id__  | String | Required | The Third party user account ID of the member initiating the transaction
__transfer_id__  | String | Required | An ID generated by the third party and sent to BBVA the transfer to/from the settlement account is initiated
__confirmation_id__  | Number | Required | An ID returned by BBVA when the transfer to/from the settlement account is completed



**Example Reconciliation File**

```
timestamp,type,amount,user_id,transfer_id,confirmation_id
2014-11-25T12:00:06,credit,10,812-873-1000,12341,111111180
2014-11-25T12:01:29,debit,5,812-873-2000,12342,111111181
2014-11-25T12:00:06,credit,10,812-873-1000,12343,111111182
2014-11-25T12:01:29,debit,5,812-873-2000,12344,111111183
2014-11-25T12:02:27,credit,20,812-873-3000,12345,111111184
2014-11-25T12:03:59,debit,15,812-873-3000,12346,111111185
2014-11-25T12:04:39,credit,40,812-873-2000,12347,111111186
2014-11-25T12:05:19,credit,30,812-873-1000,12348,111111187
2014-11-25T12:06:10,debit,25,812-873-4000,12349,111111188
```

**Special cases**

* Represents the initial credit to be rolled back (no partner ID returned)
```2014-11-25T14:00:01,credit,50,812-873-5000,12350,```
* Rollback the previous transaction
```2014-11-25T14:00:02,rollback,50,812-873-5000,12351,111111189```
* New transaction to replace the rolled back credit
```2014-11-25T14:00:03,credit,50,812-873-5000,12352,111111190```


***Reconciliaton Output (Rejects) File Format***

After the reconciliation process runs, if there have been any errors a recon_rejects file
will be created and will contain the movements that couldn't be matched.

The format for the output file is similar to the input format, but adding the error_code and error_description
columns.

Name | Type | Required | Description
--- | --- | --- | ---
__timestamp__ | Date | Required | The date and time the transaction was created by the Partner (in UTC)
__type__ | String | Required | Type of the transaction, limited to one of the following: _credit_ - funds moved into the BBVA settlement account; _debit_ - funds moved out of the BBVA settlement account
__amount__  | Number | Required | The amount of the transaction (always a positive value)
__transfer_id__  | String | Required | An ID generated by the third party and sent to BBVA the transfer to/from the settlement account is initiated
__error_code__  | String | Required | Code of the error
__error_description__  | String | Required | Description of the error


**Example Rejects File**
```
timestamp,type,amount,transfer_id,error_code,error_description
2014-11-25T12:00:00,credit,10,12341,001,SEQ-IDEN missing in ALNOVA MOVDIA file
2014-11-25T12:00:00,debit,5,12342,002,Amount with differences
2014-11-25T12:00:00,credit,20,12343,003,Flag Cred/Deb with differences
```

**Special Cases**
* This should not ocurr
```2014-11-25T12:08:06,credit,15,12344,004,Operation Number with differences,,should not occur```

## Reconciliation [/api/v2/reconciliation]

### Upload reconciliation file [POST]

Method receives a reconciliation file, that will be processed asynchronously.

#### Parameters

Name | Type | Required | Description
--- | --- | --- | ---
__hash__                   | Number | Required | MD5 hash of the uploaded file, ie : `38871de9c8ff2308884092960c01c94b`
__file__                  | String | Required | Binary data of file. Content-Disposition header should include filename and size values.

#### Response Codes

Status | Code | Description
--- | --- | ---
__201__ | OK | The reconciliation file was uploaded successfully.
__400__ | invalid_format | There was some problem while processing the file. The message will include if possible the line that caused the problem.
__400__ | missing_header | The header <header_name> is not present.


+ Request(multipart/form-data;boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW)
    + Headers

            Accept : application/x-www-form-urlencoded
            Accept-Language: en, en-US
            Authorization: TSec 2VAd0QtqXrZKdqlpwLYdQuoI4cioUBJOTzpfu-zcN2sXhYZgG-SgtUh-Uua4ViGodLC0sITdp-zrQczvgAUwtp0RQtN3SB4DmYb0mQjvQrgnYV5j0b-oQqdeFsfqEqMZTBmtyB7zuT6--qiBbNdRk2I-q9Hza0N5KxHB4JidvvhuQggwOOxyB40mRIVc6KI2ekirKxAVrtjtVaUHJEvpD2
            X-Unique-Transaction-ID: f99e5ae0-2e9f-11e4-8c21-0800200c9a66
            Content-Length: 29278


    + Body

            boundary=---------------------------41184676334
            Content-Length: 29278

            -----------------------------41184676334
            Content-Disposition: form-data; name="hash"

            38871de9c8ff2308884092960c01c94b
            -----------------------------41184676334
            Content-Disposition: form-data; name="file"; size=713915; filename="reconciliation20141215.csv"
            Content-Type: text/csv

            (Binary data not shown in example)
            -----------------------------41184676334--

+ Response 201 (application/json; charset=utf-8)

    + Body

            {
              "result": {
                "code": 201,
                "info": "Reconciliation file uploaded successfully"
              },
              "data": {
                "file_reference_id": "RECONCILIATION_20141215",
                "links": [
                  { "rel": "self", "title": "Get transfer detail", "href": "/api/v2/files/RECONCILIATION_20141215" }
                ]
              }
            }

+ Response 400 (application/json; charset=utf-8)

    + Body

            {
                "result": {
                    "code": 400,
                    "info": "Invalid format. Line 134, Type field must be credit or debit",
                    "internal_code": "invalid_format"
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": { "type": "number", "required": true },
                    "info": { "type": "string", "required": true },
                    "internal_code": { "type": "string"},
                    "errors": {
                      "type": ["array", "null"],
                      "uniqueItems": true,
                      "items": {
                        "type": ["object", "null"],
                        "properties": {
                          "errorCode":   { "type":"string", "required": true },
                          "customerDescription": { "type":"string", "required": true },
                          "shortDescription": { "type":"boolean", "required": false },
                          "system":  { "type":"string", "required": true },
                          "severity":  { "type":"string", "required": true },
                          "techCode":  { "type":"string", "required": true },
                          "language":  { "type":"string", "required": true },
                          "field":  { "type":"string", "required": true },
                          "serialversionuid":  { "type":"string", "required": true },
                          "source":  { "type":"string", "required": true }
                        }
                      }
                    }
                  }
                }
              }
            }

## Transactions [/api/v2/reconciliation{?dateFrom,dateTo,amountFrom,amountTo,next}]

+ Parameters

    + account_id ( required, string, `01-0000` )
        User's account identifier.
    + dateFrom (optional, string, `2015-02-01` )
        Date From to filter the result of the service. Format YYYY-MM-DD
    + dateTo (optional, string, `2015-02-16` )
        Date To to filter the result of the service. Format YYYY-MM-DD
    + amountFrom (optional, string, `200` )
        Amount From to filter the result of the service (cents).
    + amountTo (optional, string, `1000` )
        Amount To to filter the result of the service (cents).
    + next (optional, string, `265` )
        If we want paginate the results, pass this parameter with the value returned in the previous call.

### Get Transactions  [GET]
Method allows third party companies to gather information related to transactions performed in the Agency's Bank account.

#### Response attributes
Name | Type | Description
--- | --- | ---
__operation_number__  | String | Transaction ID.
__posted_date__        | String | Date of the transaction was done
__description__     | String | Description of the type of transaction.
__reversal_id__  | String | Only appear if the transaction settlement is cashIn/cashOut
__amount__  | Number | amount of the transaction.
__balance__       | Number | Balance of the account after the transaction.
__currency__       | String | Currency of the transaction
__check_number__   | String | Check number of the transaction.

+ Request
    + Headers

            Accept : application/json
            Accept-Language: en, en-US
            Content-Type: application/json
            X-Unique-Transaction-ID: f99e5ae0-2e9f-11e4-8c21-0800200c9a66


+ Response 200 (application/json; charset=utf-8; version=1)

    + Body

            {
                "result":
                {
                    "code": 200,
                    "info": "Operation Successful"
                },
                "data":[
                {
                    "operation_number": "751",
                    "posted_date": "2015-02-01",
                    "description": "TRANSFER FROM DWOLLA",
                    "reversal_id": "041151126",
                    "amount": 2,
                    "balance": 2044.44,
                    "currency": "USD",
                    "check_number": "0"
                }
              ]
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": {
                      "type": "number",
                      "required": true
                    },
                    "info": {
                      "type": "string",
                      "required": true
                    },
                    "internal_code": {
                      "type": "string"
                    }
                  }
                },
                "data": {
                  "type": [
                    "array",
                    "null"
                  ],
                  "uniqueItems": true,
                  "items": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "operation_number": {
                        "type": "string",
                        "required": true
                      },
                      "posted_date": {
                        "type": "string",
                        "required": true,
                        "format": "YYYY-dd-MM"
                      },
                      "description": {
                        "type": "string",
                        "required": true
                      },
                      "reversal_id": {
                        "type": "string",
                        "required": false
                      },
                      "amount": {
                        "type": "number",
                        "required": true
                      },
                      "balance": {
                        "type": "string",
                        "required": true
                      },
                      "currency": {
                        "type": "number",
                        "required": true
                      },
                      "check_number": {
                        "type": "string",
                        "required": false
                      }
                        }
                      }
                    }
                  }
                }



+ Response 206 (application/json; charset=utf-8; version=1)

    + Body

            {
                "result":
                {
                    "code": 206,
                    "info": "Partial Content"
                },
                "pagination": {
                    "next": "665"
                },
                "data":[
                {
                    "operation_number": "751",
                    "posted_date": "2015-02-01",
                    "description": "TRANSFER FROM DWOLLA",
                    "reversal_id": "041151126",
                    "amount": 2,
                    "balance": 2044.44,
                    "currency": "USD",
                    "check_number": "0"
                  }
                ]
            }

    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": {
                      "type": "number",
                      "required": true
                    },
                    "info": {
                      "type": "string",
                      "required": true
                    },
                    "internal_code": {
                      "type": "string"
                    }
                  }
                },
                "data": {
                  "type": [
                    "array",
                    "null"
                  ],
                  "uniqueItems": true,
                  "items": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "operation_number": {
                        "type": "string",
                        "required": true
                      },
                      "posted_date": {
                        "type": "string",
                        "required": true,
                        "format": "YYYY-dd-MM"
                      },
                      "description": {
                        "type": "string",
                        "required": true
                      },
                      "reversal_id": {
                        "type": "string",
                        "required": false
                      },
                      "amount": {
                        "type": "number",
                        "required": true
                      },
                      "balance": {
                        "type": "string",
                        "required": true
                      },
                      "currency": {
                        "type": "number",
                        "required": true
                      },
                      "check_number": {
                        "type": "string",
                        "required": false
                      }
                        }
                      }
                    }
                  }
                }

+ Response 500 (application/json; charset=utf-8; version=1)

    + Body

            {
                "result": {
                   "code": 500,
                   "info": "Internal error"
                }
            }


    + Schema

            {
              "type": "object",
              "properties": {
                "result": {
                  "type": "object",
                  "required": true,
                  "properties": {
                    "code": {
                      "type": "number",
                      "required": true
                    },
                    "info": {
                      "type": "string",
                      "required": true
                    },
                    "internal_code": {
                      "type": "string"
                    }
                  }
                },
                "data": {
                  "type": [
                    "array",
                    "null"
                  ],
                  "uniqueItems": true,
                  "items": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "operation_number": {
                        "type": "string",
                        "required": true
                      },
                      "posted_date": {
                        "type": "string",
                        "required": true,
                        "format": "YYYY-dd-MM"
                      },
                      "description": {
                        "type": "string",
                        "required": true
                      },
                      "reversal_id": {
                        "type": "string",
                        "required": false
                      },
                      "amount": {
                        "type": "number",
                        "required": true
                      },
                      "balance": {
                        "type": "string",
                        "required": true
                      },
                      "currency": {
                        "type": "number",
                        "required": true
                      },
                      "check_number": {
                        "type": "string",
                        "required": false
                      },
                      "links": {
                        "type": "array",
                        "required": true,
                        "uniqueItems": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "rel": {
                              "type": "string",
                              "required": true
                            },
                            "href": {
                              "type": "string",
                              "required": true
                            },
                            "title": {
                              "type": "string",
                              "required": true
                            },
                            "method": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

# Group Application

## Initialize data [/api/v2/application/init]

Application services that require an APP-TSEC to authenticate.

___This service is only available in sandbox mode___

Initializes all the data, this service must be called before any other, to create the databases to the logged app.

It will create randomized data for test users.

If its called on an existing app, it will clean the database and create the data again.


### Initialize data [POST]

In the sandbox implementation, it's possible to initialize accounts and users with data loaded by developers. All information loaded this way is optional and when not present it will default to a random valid value.

#### Attributes for the json body parameter

Name | Type | Required | Description
--- | --- | --- | ---
__users__                | Array   | Optional | List of users to insert in the application
__user[].id__            | String  | Optional | User identifier. Defaults to uuid v4.
__user[].username__      | String  | Optional | Username for login into the app. Defaults to `user_[seq_number]`. Also used as password.
__user[].name__          | String  | Optional | Name and last name of the user. Defaults to random name.
__accounts__             | Array   | Optional | List of accounts to insert in the application
__account[].account_id__ | String  | Optional | Account identifier. Defaults to a random 4 digit string prefixed with type, ex: `02-1234`.
__account[].number__     | Number  | Optional | Last digits of the account number. It gets prefixed with '*******'. Defaults to a random 4 digit string.
__account[].alias__      | String  | Optional | User description of the account. Defaults to a random description.
__account[].linked__     | Boolean | Optional | Indicates if the account have been linked to the application. Defaults randomly to `true` or `false`.
__account[].balance__    | Number  | Optional | Amount of money in the account. Default to a random value from 0 to 1000.
__account[].currency__   | String  | Optional | Account's type of currency. Defaults to `USD`.
__account[].type__       | String  | Optional | Type of account from the valid `account_type`s. Defaults to a random valid type.
__account[].user__       | String  | Optional | A username from the `users` list who owns the account. Defaults to a random user of the `users` list.


+ Request
    + Headers

            Accept : application/json
            Accept-Language: en, en-US
            Content-Type: application/json
            Authorization: Tsec 2VAd0QtqXrZKdqlpwLYdQuoI4cioUBJOTzpfu-zcN2sXhYZgG-SgtUh-Uua4ViGodLC0sITdp-zrQczvgAUwtp0RQtN3SB4DmYb0mQjvQrgnYV5j0b-oQqdeFsfqEqMZTBmtyB7zuT6--qiBbNdRk2I-q9Hza0N5KxHB4JidvvhuQggwOOxyB40mRIVc6KI2ekirKxAVrtjtVaUHJEvpD2
            X-Unique-Transaction-ID: f99e5ae0-2e9f-11e4-8c21-0800200c9a66

    + Body

            {
                "users": [
                     {
                         "id": "user_1",
                         "username": "user_1",
                         "name": "Lucy Holmes"
                     },
                     {
                         "id": "user_2",
                         "username": "user_2",
                         "name": "Silvester Stallone"
                     },
                     {
                         "id": "user_3",
                         "username": "user_3",
                         "name": "Mike Sullivan"
                     }
                ],
                "accounts": [
                     {
                         "account_id": "AAA1",
                         "number": "1234",
                         "alias": "main checking account",
                         "linked": true,
                         "balance": 500,
                         "currency": "USD",
                         "type": "01",
                         "user": "user_1"
                     },
                     {
                         "account_id": "BBB2",
                         "number": "5678",
                         "alias": "travel account",
                         "linked": false,
                         "balance": 2500,
                         "currency": "USD",
                         "type": "02",
                         "user": "user_1"
                     },
                     {
                         "account_id": "CCC3",
                         "number": "4567",
                         "alias": "billing account",
                         "linked": false,
                         "balance": 350,
                         "currency": "USD",
                         "type": "01",
                         "user": "user_2"
                     }
                ]
            }

+ Response 201 (application/json; charset=utf-8)

    + Body

            {
                "status": 201
            }